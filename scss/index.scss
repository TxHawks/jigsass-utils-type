// *************************************
//
// u jigsass-utils-type
// -> `font-size` and `line-height` definitions
//
// Author: TxHawks (tofu.hawks@gmail.com)
// https://txhawks.github.io/jigsass-utils-type/
// https://www.github.com/txhawks/jigsass-utils-type/
//
// *************************************

@charset 'UTF-8';

// -------------------------------------
// Dependencies
// -------------------------------------

@if (not mixin-exists(jigsass-define-util)) {
  @error '`jigsass-utils-type` has a dependency on `jigsass-tools-selectors`. ' +
    'Please import it before importing this file.';
}





// -------------------------------------
// Introduction
// -------------------------------------

// stylelint-disable
/* ---
section: Type Utils
title: Introduction
order: -10
---

[![NPM version][npm-image]][npm-url]
[![Dependency Status][daviddm-image]][daviddm-url]

A dynamically generated set of typesetting utility classes, in charge of modifying
an element's font-size and line-height, based on sizes defined in the
[$jigsass-sizes](https://txhawks.github.io/jigsass-tools-typography/#variable-jigsass-sizes)
variable.

Additionally, JigSass Type provides utility classes for setting an element's
`font-weight`, `font-style` and `font-family` stacks through the
`$jigsass-font-stacks` variable.

#### Available classes

  - `u-type--<named-size>` (example: .u-type--alpha)
  - `u-fw--<weight>` (example: .u-fw--700)
  - `u-fs--i` (italic)
  - `u-fs--n` (normal)
  - `u-fs--o` (oblique)
  - `u-ff--<stack>` (example: .u-ff--serif)



#### Installation

Using npm:

```sh
npm i -S jigsass-utils-type
```

#### Usage
Import JigSass Utils Type into your main scss file near its very end, together with all
other utilities (utilities should always be the last to be imported).

```scss
@import 'path/to/jigsass-utils-type/scss/index';
```

Like all other JigSass Utils, JigSass Type does not automatically generate any CSS
when imported. You would need to explicitly indicate that each individual typesetting
class should actually be generated in each component or object it is used in:

```scss
// _c.foo.scss
.foo {
  @include jigsass-util(u-type, $modifier: alpha);

  ...
}
```

```scss
// _c.bar.scss
.bar {
  @include jigsass-util(u-type, $modifier: epsilon);
  @include jigsass-util(u-type, $modifier: delta, $from: large);

  ...
}
```

Doing so helps us a great deal with portability, as no matter where we import component or object
partials, the correct utility classes will be generated. Think of it as a poor man's dependency
management.

Developer communication is also assisted by including "dependencies" wherever they are required,
as anyone going through a partial, can easily understand how it should be marked up with just a
glance.

As far as bloat goes, just don't worry about it - the actual styles will only be generated once,
at the location in the cascade where the Jigsass Type partial was imported into the main file.



JigSass Type classes are responsive-enabled, using [JigSass MQ](https://txhawks.github.io/jigsass-tools-mq/)
and the breakpoints defined in the [$jigsass-breakpoints](https://txhawks.github.io/jigsass-tools-mq/#variable-jigsass-breakpoints) variable.

Based on the breakpoint arguments passed to `jigsass-util` when including a type class, responsive
modifiers are generated according to the following logic:

```scss
.u-type--modifier[-[-from-{breakpoint-name}][-until-{breakpoint-name}][-misc-{breakpoint-name}]]
```

So, assuming the `medium`, `large` and `landscape` breakpoints are defined in `$jigsass-breakpoints`
as `600px`, `1024px` and `(orientation: landscape)` respectively,

```scss
@include jigsass-util(u-type, $modifier: zeta);
```
will generate the `.u-type--zeta` class, which is not limited to any media-query.

```scss
@include jigsass-util(u-type, $modifier: zeta, $until: medium);
```

will generate the `.u-type--zeta--until-medium` class, which will be in effect at
`(max-width: 37.49em)` and will override styles in the default class until that point.

```scss
@include jigsass-util(u-type, $modifier: zeta, $from: large, $misc: landscape);
```

will generate the `.u-type--zeta--from-large-when-landscape` class, which will go into
effect at `(min-width: 64em) and (orientation: landscape)` and will override styles in the default
class under these  conditions.


**License:** MIT



[npm-image]: https://badge.fury.io/js/jigsass-utils-type.svg
[npm-url]: https://npmjs.org/package/jigsass-utils-type

[daviddm-image]: https://david-dm.org/TxHawks/jigsass-utils-type.svg?theme=shields.io
[daviddm-url]: https://david-dm.org/TxHawks/jigsass-utils-type
*/
// stylelint-enable





// -------------------------------------
// Variables
// -------------------------------------

// stylelint-disable
/* ---
section: Type Utils
title: Configuration
order: 0
---

JigSass Utils Type can be tweaked by setting the values of the following
configuration variables. To override the default values, set your own
_before_ importing JigSass Utils Type.

#### Font family stacks

```scss
$jigsass-font-stacks
```

**Type:** `Map`

A map holding named lists of font-family stacks for use as font-family modfiers:
```scss
@include jigsass-util(u-ff, $modifier: serif);
```

**Default:** `()`
*/
//stylelint-enable
/// A map holding named lists of font-family stacks.
/// ---
/// @type Map
/// ---
$jigsass-font-stacks: () !default;


// Used internally for generating font-style classes.
$_jigsass-fs-val: (i: italic, n: normal, o: oblique);

// Used internally for generating text-decoration classes.
$_jigsass-td-val: (n: none, u: underline, o: overline, l: line-through);

// Used internally to store doclets
$_doclet-store: () !default;

// Used internally to ordering doclets
$_jigsass-util-type-i: 1;





// -------------------------------------
// Definitions
// -------------------------------------

@include jigsass-define-util(u-type) {
  $parsed-mod-values: jigsass-parse-modifier($jigsass-util-modifier);
  $modifier: map-get($parsed-mod-values, modifier);
  $state: map-get($parsed-mod-values, state) or '';

  @if (
    index(
      map-keys(jigsass-merge-sizes()),
      $modifier
    )
  ) {
    @if (
      not global-variable-exists(jigsass-sizes) or
      not function-exists(jigsass-merge-sizes)
    ) {
      @error '`jigsass-utils-type` has a dependency on `jigsass-tools-typography`. ' +
        'Please import it before importing this file.';
    }

    $_from: map-get($jigsass-util-mq-args, from);
    $_until: map-get($jigsass-util-mq-args, until);
    $_misc: map-get($jigsass-util-mq-args, misc);

    $_rhythm-bps: map-get(jigsass-merge-sizes(), rhythm-unit);
    $_size-bps: map-get(jigsass-merge-sizes(), $modifier) or ();

    $_bps: map-keys(map-merge($_rhythm-bps, $_size-bps));
    $_bps: if($_from and not index($_bps, $_from), append($_bps, $_from), $_bps);

    $_bps-order: map-keys(jigsass-mq-sort-length-breakpoints());

    &#{$state} {
      @each $bp in $_bps {
        @if (not $_from or index($_bps-order, $_from) <= index($_bps-order, $bp)) {
          @if (not $_until or index($_bps-order, $_until) > index($_bps-order, $bp)) {
            @if ($_from == $bp) {
              @include jigsass-font-size(
                $size: $modifier,
                $unit: rem
              );
            }
            @else {
              @at-root (without: media) {
                @include jigsass-mq($from: $bp, $until: $_until, $misc: $_misc) {
                  & {
                    @include jigsass-font-size(
                      $size: $modifier,
                      $unit: rem
                    );
                  }
                }
              }
            }
          }
        }
      }

      $_doclet: $jigsass-util-name + ($jigsass-util-modifier or '');
      @if (not index($_doclet-store, $_doclet)) {
        $_doclet-store: append($_doclet-store, $_doclet) !global;
        // stylelint-disable
/* ---
section: Type Utils
title: Font Size #{$jigsass-util-modifier}
order: #{$_jigsass-util-type-i}
---
A util to modify an element's font size to the that set in
`$jigsass-sizes.#{$modifier}` and adjust its line-height
accordingly.

#### Include with:

```scss
@include jigsass-util(u-type, $modifier: #{$jigsass-util-modifier}[, $from, $until, $misc]);
```

#### Example

```example:html
<p class='u-type--#{$jigsass-util-modifier}'>
  This is <em>#{$jigsass-util-modifier}</em> sized text.
</p>
```
*/
        $_jigsass-util-type-i: $_jigsass-util-type-i + 1 !global;
        // stylelint-enable
      }
    }
  }
  @else {
    @warn 'jigsass-util-type: Could not find a size definition for ' +
      '#{$jigsass-util-modifier}. No class will be generated.';
  }
}



@include jigsass-define-util(u-fs) {
  @if (not $jigsass-util-modifier) {
    @error '#{$jigsass-util-name} must be passed a font-style modifier.';
  }
  @if (not index(i n o, $jigsass-util-modifier)) {
    @error '#{$jigsass-util-name} modifiers may only be `i` for italics, `n` for normal ' +
      'or `o` fro oblique. You are trying to pass #{$jigsass-util-modifier}.';
  }

  font-style: map-get($_jigsass-fs-val, $jigsass-util-modifier);

  $_doclet: $jigsass-util-name + ($jigsass-util-modifier or '');
  @if (not index($_doclet-store, $_doclet)) {
    $_doclet-store: append($_doclet-store, $_doclet) !global;
    // stylelint-disable

/* ---
section: Type Utils
title: Font Style: #{map-get($_jigsass-fs-val, $jigsass-util-modifier)}
order: #{$_jigsass-util-type-i}
---
A util class for setting an element's font-style to #{map-get($_jigsass-fs-val, $jigsass-util-modifier)}

#### Include with:

```scss
@include jigsass-util(#{$jigsass-util-name}, $modifier: #{$jigsass-util-modifier}[, $from, $until, $misc]);
```

#### example

```example:html
<p class=#{$jigsass-util-name}--#{$jigsass-util-modifier}>
  This element's font-style is set to <code>#{map-get($_jigsass-fs-val, $jigsass-util-modifier)}</code>.
</p>
```

*/
    // stylelint-enable
    $_jigsass-util-type-i: $_jigsass-util-type-i + 1 !global;
  }
}


@include jigsass-define-util(u-fw) {
  @if (not $jigsass-util-modifier) {
    @error '#{$jigsass-util-name} must be passed a font-weight modifier.';
  }

  $modifier: $jigsass-util-modifier;
  $parsed-mod-values: jigsass-parse-modifier($modifier);
  $state: '';

  @if (type-of($modifier) == string) {
    $modifier: jigsass-str-to-number(map-get($parsed-mod-values, modifier));
    $state: map-get($parsed-mod-values, state) or '';
  }

  @if (type-of($modifier) != number and not unitless($modifier)) {
    @error '#{$jigsass-util-name}: A font-weight modifier must be a unitless number,' +
      'but you are trying to use #{$modifier}.';
  }

  &#{$state} {
    font-weight: $modifier;


    $_doclet: $jigsass-util-name + ($jigsass-util-modifier or '');
    @if (not index($_doclet-store, $_doclet)) {
      $_doclet-store: append($_doclet-store, $_doclet) !global;
      // stylelint-disable

/* ---
section: Type Utils
title: Font Weight: #{$jigsass-util-modifier}
order: #{$_jigsass-util-type-i}
---
A util class for setting an element's font-weight to #{$jigsass-util-modifier}

#### Include with:

```scss
@include jigsass-util(#{$jigsass-util-name}, $modifier: #{$jigsass-util-modifier}[, $from, $until, $misc]);
```

#### example

```example:html
<p class=#{$jigsass-util-name}--#{$jigsass-util-modifier}>
  This element's font-weight is set to <code>#{$jigsass-util-modifier}</code>.
</p>
```

*/
      // stylelint-enable
      $_jigsass-util-type-i: $_jigsass-util-type-i + 1 !global;
    }
  }
}


@include jigsass-define-util(u-ff) {
  @if (not $jigsass-util-modifier) {
    @error '#{$jigsass-util-name} must be passed a font-faimly stack as a modifier.';
  }

  $stack: map-get($jigsass-font-stacks, $jigsass-util-modifier);

  @if (not $stack) {
    @error 'u-ff: A `#{$jigsass-util-modifier}` stack is not defined in `$jigsass-font-stacks`.';
  }

  font-family: $stack;

  $_doclet: $jigsass-util-name + ($jigsass-util-modifier or '');
  @if (not index($_doclet-store, $_doclet)) {
    $_doclet-store: append($_doclet-store, $_doclet) !global;
    // stylelint-disable

/* ---
section: Type Utils
title: Font family: #{$jigsass-util-modifier}
order: #{$_jigsass-util-type-i}
---
A util class for setting an element's font-familly to the #{$jigsass-util-modifier} named stack

#### Include with:

```scss
@include jigsass-util(#{$jigsass-util-name}, $modifier: #{$jigsass-util-modifier}[, $from, $until, $misc]);
```

#### example

```example:html
<p class=#{$jigsass-util-name}--#{$jigsass-util-modifier}>
  This element's font-family is set to the <code>#{$jigsass-util-modifier}</code> stack.
</p>
```

*/
    // stylelint-enable
    $_jigsass-util-type-i: $_jigsass-util-type-i + 1 !global;
  }
}


@include jigsass-define-util(u-td) {
  @if (not $jigsass-util-modifier) {
    @error '#{$jigsass-util-name} must be passed a text decoration modifier.';
  }

  $parsed-mod-values: jigsass-parse-modifier($jigsass-util-modifier);
  $modifier: map-get($parsed-mod-values, modifier);
  $state: map-get($parsed-mod-values, state) or '';

  @if (not index(n u o l, $modifier)) {
    @error '#{$jigsass-util-name} modifiers may only be `n` for none, `u` for underline, ' +
      '`o` for overlinea or `l` for line-through. ' +
      'You are trying to pass #{$modifier}.';
  }

  &#{$state} {
    text-decoration: map-get($_jigsass-td-val, $modifier);


    $_doclet: $jigsass-util-name + ($jigsass-util-modifier or '');
    @if (not index($_doclet-store, $_doclet)) {
      $_doclet-store: append($_doclet-store, $_doclet) !global;
      // stylelint-disable

/* ---
section: Type Utils
title: Text Decoration: #{map-get($_jigsass-td-val, $modifier)$state}
order: #{$_jigsass-util-type-i}
---
A util class for setting an element's text decoration to `#{map-get($_jigsass-td-val, $modifier)}`
#{if(
  $state != '',
  ' on `' + $state + '`',
  ''
)}

#### Include with:

```scss
@include jigsass-util(#{$jigsass-util-name}, $modifier: #{$jigsass-util-modifier}[, $from, $until, $misc]);
```

#### example

```example:html
<p class=#{$jigsass-util-name}--#{$jigsass-util-modifier}>
  This element's font-style is set to
  <code>#{map-get($_jigsass-td-val, $modifier)}</code>
#{if(
  $state != '',
  ' on <code>' + $state + '</code>',
  ''
)}.
</p>
```

*/
      // stylelint-enable
      $_jigsass-util-type-i: $_jigsass-util-type-i + 1 !global;
    }
  }
}
